import datetime
import sqlite3
import time
from os import getenv

import schedule
import telegram
import telegram.ext
from dotenv import load_dotenv

from message import Message
from utils import (get_first_name, get_nsk_time, get_time_to_msg,
                   get_users_dict, validate_city, validate_name)

load_dotenv()

bot = telegram.Bot(token=getenv('TELEGRAM_BOT_API'))
upd = telegram.ext.Updater(token=getenv('TELEGRAM_BOT_API'))

connect = sqlite3.connect('users.db')
cursor = connect.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–î
cursor.execute("CREATE TABLE IF NOT EXISTS users \
             (id INTEGER PRIMARY KEY, name TEXT, city TEXT, birthday TEXT)")
connect.commit()

def start(update, context):
    user_id = update.effective_chat.id
    connect = sqlite3.connect('users.db')
    bot.send_message(chat_id=user_id,
                     text='–ë–∏–ø-–±–∏–ø-–±—É–ø-—É–∏–ø... –ù—É, —Ç–æ –µ—Å—Ç—å –ø—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç '
                     '<b>–î–µ–π–ª</b> –∏ —è –¥–≤–æ—Ä–µ—Ü–∫–∏–π! –¢–≤–æ–π –ª–∏—á–Ω—ã–π —Ä–æ–±–æ-–ø–æ–º–æ—â–Ω–∏–∫ü§ñ',
                     parse_mode='HTML')
    with connect:
        cursor = connect.cursor()
        cursor.execute("SELECT * FROM users WHERE id=?", (user_id,))
        row = cursor.fetchone()
        if row:
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –µ–≥–æ
            name, city, birthday = row[1], row[2], row[3]
            if not name:
                bot.send_message(chat_id=user_id,
                     text='–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ –§–ò–û')
                return 'get_name'
            elif not city:
                bot.send_message(chat_id=user_id,
                     text=f'{get_first_name(name)}, –∞ –∏–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?')
                return 'get_city'
            elif not birthday:
                bot.send_message(chat_id=user_id,
                     text=f'{get_first_name(name)}, –∞ –∫–æ–≥–¥–∞ —Ç—ã —Ä–æ–¥–∏–ª—Å—è(–∞—Å—å)? '
                     '–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, —á—Ç–æ–±—ã —è '
                     '—Ä–∞–∑–æ–±—Ä–∞–ª—Å—è')
                return 'get_bday'
            else:
                keyboard = [[telegram.KeyboardButton('–ü–æ–∫–∞–∂–∏ –ø—Å–∏—Ö–æ–º–∞—Ç—Ä–∏—Ü—É')]]
                reply_markup = telegram.ReplyKeyboardMarkup(keyboard)
                bot.send_message(chat_id=user_id,
                        text=f'{get_first_name(name)}, –≤–∏–∂—É, –º—ã —Å —Ç–æ–±–æ–π —É–∂–µ '
                        '–∑–Ω–∞–∫–æ–º—ã! –Ø –ø—Ä–æ–¥–æ–ª–∂—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ 6:00 '
                        '(–ú—Å–∫)üëç',
                        parse_mode='HTML',
                        reply_markup=reply_markup)
        else:
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            cursor.execute("INSERT INTO users (id) VALUES (?)", (user_id,))
            bot.send_message(chat_id=user_id,
                     text='–Ø —É–º–µ—é –Ω–µ —Ç–∞–∫ –º–Ω–æ–≥–æ, –Ω–æ —è —Ä–∞–∑–≤–∏–≤–∞—é—Å—å. –ü–æ–∫–∞ '
                     '—á—Ç–æ, –º–æ–≥—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, '
                     '–≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞—Å—Å–∫–∞–∂—É –æ <b>–ø–æ–≥–æ–¥–µ</b>, —Å–æ—Å—Ç–∞–≤–ª—é —Ç–≤–æ–π '
                     '–ª–∏—á–Ω—ã–π <b>–≥–æ—Ä–æ—Å–∫–æ–ø</b>, –ø–æ–¥–µ–ª—é—Å—å <b>—Ü–∏—Ç–∞—Ç–æ–π</b> –¥–Ω—è –∏ '
                     '–ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é <b>—Ñ–∏–ª—å–º</b>.',
                     parse_mode='HTML')
            bot.send_message(chat_id=user_id,
                     text='–ê—Ö –¥–∞! –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é '
                     '—Ç–≤–æ–∏ –§–ò–û –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –∏ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –¥—Ä–µ–≤–Ω–∏–µ —Ç–∞–π–Ω—ã–µ '
                     '–∑–Ω–∞–Ω–∏—è –∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—é, —Å–æ—Å—Ç–∞–≤–ª—é —Ç–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é '
                     '–ø—Å–∏—Ö–æ–º–∞—Ç—Ä–∏—Ü—É. –ü—Ä–æ—Å—Ç–æ –ø–æ—Ç–æ–º—É, —á—Ç–æ –º–æ–≥—Éüòé')
            time.sleep(5)
            update.message.reply_text('–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ –§–ò–û')
            return 'get_name'


def get_name(update, context):
    user_id = update.effective_chat.id
    name = update.message.text
    try:
        name = validate_name(name)
    except ValueError:
        update.message.reply_text(
            '–ù—É —ç—Ç–æ —Ä–∞–∑–≤–µ –§–ò–û? –¢—ã –ø—ã—Ç–∞–ª—Å—è –º–µ–Ω—è –æ–±–º–∞–Ω—É—Ç—å? –ò —Å —ç—Ç–æ–≥–æ –º—ã '
            '–Ω–∞—á–∏–Ω–∞–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ? –ù–∞–¥–µ—é—Å—å, —Ç—ã –ø—Ä–æ—Å—Ç–æ –æ—à–∏–±—Å—è. –ü–æ—ç—Ç–æ–º—É –¥–∞–≤–∞–π '
            '–µ—â–µ —Ä–∞–∑–æ–∫. –§–ò–û. –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ. –°–ø–∞—Å–∏–±–æ:)'
        )
        return 'get_name'
    else:
        with sqlite3.connect('users.db') as connect:
            cursor = connect.cursor()
            cursor.execute("UPDATE users SET name = ? WHERE id = ?",
                           (name, user_id))
        update.message.reply_text(
            f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {get_first_name(name)}! –ê –∏–∑ –∫–∞–∫–æ–≥–æ —Ç—ã '
            '–≥–æ—Ä–æ–¥–∞?'
        )
        return 'get_city'


def get_city(update, context):
    user_id = update.effective_chat.id
    city = update.message.text
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–æ–¥
        city = validate_city(city)
    except ValueError:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
        update.message.reply_text(
            '—ç—ç—ç—ç—ç, —á–µ–≥–æ? —Ç–∞–∫–æ–π –≤–æ–æ–±—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç? –£ –º–µ–Ω—è –≤ –±–∞–∑–µ –≥–æ—Ä–æ–¥–æ–≤ '
            '–æ–∫–æ–ª–æ 5000 –∏, –ø—Ä–∏–∫–∏–Ω—å, —Ç–∞–∫–æ–≥–æ —Ç–∞–º –Ω–µ—Ç! –ò–∑–¥–µ–≤–∞–µ—à—å—Å—è –Ω–∞–¥ –±–æ—Ç–æ–º? '
            '–ß—É–≤—Å—Ç–≤—É–µ—à—å —Å–≤–æ–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ '
            '—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥, –Ω–µ –¥–æ–≤–æ–¥–∏ –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–∏—è!!!ü§¨ü§ñ'
        )
        return 'get_city'
    else:
        with sqlite3.connect('users.db') as connect:
            cursor = connect.cursor()
            cursor.execute("UPDATE users SET city = ? WHERE id = ?",
                           (city, user_id))
            cursor.execute("SELECT * FROM users WHERE id=?", (user_id,))
            row = cursor.fetchone()
            name = row[1]
        update.message.reply_text(
            f'–í–∞—É! {city} - –æ—Ç–ª–∏—á–Ω—ã–π –≥–æ—Ä–æ–¥! –ú–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, –º–æ–π —Å–∞–º—ã–π –ª—é–±–∏–º—ã–π! '
            f'{get_first_name(name)}, –∞ –∫–æ–≥–¥–∞ —Ç—ã —Ä–æ–¥–∏–ª—Å—è(–∞—Å—å)? –ù–∞–ø–∏—à–∏, '
            '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, —á—Ç–æ–±—ã —è —Ä–∞–∑–æ–±—Ä–∞–ª—Å—è'
        )
        return 'get_bday'


def get_bday(update, context):
    text = update.message.text
    user_id = update.effective_chat.id

    try:
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—ä–µ–∫—Ç datetime.date
        birthday = datetime.datetime.strptime(text, '%d.%m.%Y').date()
    except ValueError:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
        update.message.reply_text(
            '–ø—à—à—à –≥—Ä—Ä—Ä—Ä —Ö—à—Å—Å—Å—Å —Ñ—Ä—Ä—Ä–≥–≥–≥–≥... –ù—É –≤–æ—Ç! –Ø –∂–µ –≥–æ–≤–æ—Ä–∏–ª, —á—Ç–æ –Ω–µ '
            '—Ä–∞–∑–±–µ—Ä—É—Å—å! –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º–µ–Ω–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì'
        )
        return 'get_bday'
    else:
        if birthday > datetime.datetime.now().date():
            update.message.reply_text(
                '–ü—Ä–æ—Å—Ç–∏, –Ω–æ —Ç—ã —Ç–æ—á–Ω–æ –Ω–µ –º–æ–≥ —Ä–æ–¥–∏—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º.. –≠—Ç–æ –¥–∞–∂–µ '
                '–±–æ—Ç—É –ø–æ–Ω—è—Ç–Ω–æ! –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
            )
            return 'get_bday'
        else:
            with sqlite3.connect('users.db') as connect:
                cursor = connect.cursor()
                cursor.execute("UPDATE users SET birthday = ? WHERE id = ?",
                            (birthday, user_id))
                cursor.execute("SELECT * FROM users WHERE id=?", (user_id,))
                row = cursor.fetchone()
                name, city, birthday = row[1], row[2], row[3]
            msg = Message(name, city, birthday)
            bot.send_message(chat_id=user_id,
                    text=msg.create_welcome_message(),
                    parse_mode='HTML')
            time.sleep(30)
            bot.send_message(chat_id=user_id,
                    text='–¢–µ–ø–µ—Ä—å <b>–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00 (–ø–æ –ú–æ—Å–∫–≤–µ)</b> —è –±—É–¥—É '
                    '–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–∏—Å—å–º–∞üòå –°–µ–π—á–∞—Å '
                    '–ø—Ä–∏—à–ª—é –ø—Ä–∏–º–µ—Ä...',
                    parse_mode='HTML')
            time.sleep(25)
            keyboard = [[telegram.KeyboardButton('–ü–æ–∫–∞–∂–∏ –ø—Å–∏—Ö–æ–º–∞—Ç—Ä–∏—Ü—É')]]
            reply_markup = telegram.ReplyKeyboardMarkup(keyboard)
            bot.send_message(chat_id=user_id,
                    text=msg.create_daily_message(),
                    parse_mode='HTML',
                    reply_markup=reply_markup)
            return telegram.ext.ConversationHandler.END
    

conv_handler = telegram.ext.ConversationHandler(
    entry_points=[telegram.ext.CommandHandler('start', start)],
    states={
        'get_name': [
            telegram.ext.MessageHandler(telegram.ext.Filters.text, get_name)
        ],
        'get_city': [
            telegram.ext.MessageHandler(telegram.ext.Filters.text, get_city)
        ],
        'get_bday': [
            telegram.ext.MessageHandler(telegram.ext.Filters.text, get_bday)
        ],
    },
    fallbacks=[]
)

def button_handler(update, context):
    user_id = update.effective_chat.id
    with sqlite3.connect('users.db') as connect:
        cursor = connect.cursor()
        cursor.execute("SELECT * FROM users WHERE id=?", (user_id,))
        row = cursor.fetchone()
        name, city, birthday = row[1], row[2], row[3]
        msg = Message(name, city, birthday)
    text = msg.create_psyhomatrix_message()
    update.message.reply_text(text, parse_mode='HTML')


def echo(update, context):
    h, m = get_time_to_msg()
    if int(h) == 1 or int(h) == 21:
        h_txt = '—á–∞—Å'
    elif 1 < int(h) < 5 or 21 < int(h) < 25:
        h_txt = '—á–∞—Å–∞'
    else:
        h_txt = '—á–∞—Å–æ–≤'
    if str(m)[-1] == '1':
        m_txt = '–º–∏–Ω—É—Ç—É'
    elif 1 < int(str(m)[-1]) < 5:
        m_txt = '–º–∏–Ω—É—Ç—ã'
    else:
        m_txt = '–º–∏–Ω—É—Ç'
    if int(h) == 0:
        text = f'–Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {m} {m_txt}'
    elif int(m) == 0:
        text = f'–Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {h} {h_txt}'
    else:
        text = f'–Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {h} {h_txt} {m} {m_txt}'
    update.message.reply_text(text)


upd.dispatcher.add_handler(conv_handler)
upd.start_polling()
upd.dispatcher.add_handler(telegram.ext.MessageHandler(
    telegram.ext.Filters.regex('^–ü–æ–∫–∞–∂–∏ –ø—Å–∏—Ö–æ–º–∞—Ç—Ä–∏—Ü—É$'), button_handler))
upd.dispatcher.add_handler(telegram.ext.MessageHandler(
    telegram.ext.Filters.text & ~telegram.ext.Filters.command, echo))


def send_message_every_day():
    nsk_now = get_nsk_time()
    nsk_hour_minute = nsk_now.strftime('%H:%M')
    
    if nsk_hour_minute == '10:00':
        users = get_users_dict()
        for user in users:
            msg = Message(
                users[user]['name'],
                users[user]['city'],
                users[user]['birthday']
            )
            bot.send_message(
                chat_id=user,
                text=msg.create_daily_message(),
                parse_mode='HTML'
            )
        
# –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é send_message_every_day() –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
schedule.every().day.at("10:00").do(send_message_every_day)

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
while True:
    schedule.run_pending()
    time.sleep(1)