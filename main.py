import datetime
import logging
import sqlite3
import sys
import time
from os import getenv

import schedule
import telegram
import telegram.ext
from telegram.error import Unauthorized
from dotenv import load_dotenv

from message import DICT_MSG, Message
from utils import (get_first_name, get_time_to_msg, get_users_dict,
                   validate_city, validate_name)


# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ .env
load_dotenv()

TELEGRAM_TOKEN = getenv('DALE_API')

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger('bot_logger')
logger.setLevel(logging.DEBUG)
file_handler = logging.FileHandler('bot_logs.log')
file_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

if not TELEGRAM_TOKEN:
        logger.critical('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è')
        sys.exit()

# –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –∞–ø–¥–µ–π—Ç–µ—Ä
bot = telegram.Bot(token=TELEGRAM_TOKEN)
upd = telegram.ext.Updater(token=TELEGRAM_TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–î
with sqlite3.connect('users.db') as connect:
    cursor = connect.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, \
                   fullname TEXT, name TEXT, city TEXT, birthday TEXT, \
                   is_blocked BOOLEAN DEFAULT 0)")

# –ó–∞–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
KEYBOARD = [[telegram.KeyboardButton('üë§ –ü–æ–∫–∞–∂–∏ –º–æ–π –ø—Ä–æ—Ñ–∞–π–ª')]]
REPLY_MARKUP = telegram.ReplyKeyboardMarkup(
    KEYBOARD,
    resize_keyboard=True,
    button_width=2,
    button_height=2
)

def start(update, context):
    '''–§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'''
    user_id = update.effective_chat.id
    connect = sqlite3.connect('users.db')
    update.message.reply_text(text=DICT_MSG['hi'], parse_mode='HTML')
    # –ò—â–µ–º –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id
    with connect:
        cursor = connect.cursor()
        cursor.execute("SELECT * FROM users WHERE id=?", (user_id,))
        row = cursor.fetchone()
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º chat_id –µ—Å—Ç—å –≤ –ë–î:
        if row:
            # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –ø–µ—Ä–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            name, city, birthday = row[2], row[3], row[4]
            # –ï—Å–ª–∏ –∏–º–µ–Ω–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç:
            if not name:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
                update.message.reply_text(DICT_MSG['get_name'],
                                          parse_mode='HTML')
                return 'get_name'
            # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑–µ –Ω–µ—Ç:
            elif not city:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
                update.message.reply_text(DICT_MSG['get_city'].format(name),
                                          parse_mode='HTML')
                return 'get_city'
            # –ï—Å–ª–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –±–∞–∑–µ –Ω–µ—Ç:
            elif not birthday:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
                update.message.reply_text(DICT_MSG['get_bday'].format(name),
                                          parse_mode='HTML')
                return 'get_bday'
            # –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–µ—Å—Ç–Ω—ã:
            else:
                # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                update.message.reply_text(
                    text=DICT_MSG['welcome_back'].format(name),
                    parse_mode='HTML',
                    reply_markup=REPLY_MARKUP
                )
        # –ï—Å–∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –Ω–µ—Ç
        else:
            # –î–µ–ª–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º ID –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –§–ò–û
            cursor.execute("INSERT INTO users (id) VALUES (?)", (user_id,))
            logger.info(f'–í –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å:\nID - {user_id}')
            update.message.reply_text(
                text=DICT_MSG['registration_1'],
                parse_mode='HTML'
            )
            update.message.reply_text(
                text=DICT_MSG['registration_2'],
                parse_mode='HTML'
            )
            time.sleep(5)
            update.message.reply_text(DICT_MSG['get_name'], parse_mode='HTML')
            return 'get_name'


def get_name(update, context):
    '''–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –§–ò–û –∏ –∏–º–µ–Ω–∏, –∏ –∑–∞–ø–∏—Å–∏ –∏—Ö –≤ –ë–î'''
    user_id = update.effective_chat.id
    fullname = update.message.text
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è
    try:
        fullname = validate_name(fullname)
    except:
        # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        update.message.reply_text(DICT_MSG['invalid_name'], parse_mode='HTML')
        return 'get_name'
    else:
        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –§–ò–û –∏ –∏–º—è –≤ –ë–î
        name = get_first_name(fullname)
        with sqlite3.connect('users.db') as connect:
            cursor = connect.cursor()
            cursor.execute(
                "UPDATE users SET fullname = ?, name = ? WHERE id = ?",
                (fullname, name, user_id))
            logger.info(
                f'–í –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å:\n'
                f'ID - {user_id}\n–§–ò–û - {fullname}'
            )
        update.message.reply_text(DICT_MSG['get_city_2'].format(name),
                                  parse_mode='HTML')
        return 'get_city'


def get_city(update, context):
    '''–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏ –∑–∞–ø–∏—Å–∏ –µ–≥–æ –≤ –ë–î'''
    user_id = update.effective_chat.id
    city = update.message.text
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ—Ä–æ–¥
        city = validate_city(city)
    except:
        # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        update.message.reply_text(DICT_MSG['invalid_city'], parse_mode='HTML')
        return 'get_city'
    else:
        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥ –≤ –ë–î
        with sqlite3.connect('users.db') as connect:
            cursor = connect.cursor()
            cursor.execute("UPDATE users SET city = ? WHERE id = ?",
                           (city, user_id))
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            cursor.execute("SELECT * FROM users WHERE id=?", (user_id,))
            row = cursor.fetchone()
            name = row[2]
            fullname = row[1]
            logger.info(f'–í –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å:\nID - {user_id}'
                        f'\n–§–ò–û - {fullname}\n–ì–æ—Ä–æ–¥ - {city}')
        update.message.reply_text(DICT_MSG['get_bday_2'].format(city, name),
                                  parse_mode='HTML')
        return 'get_bday'


def get_bday(update, context):
    '''–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ –µ—ë –≤ –ë–î'''
    bday = update.message.text
    user_id = update.effective_chat.id
    try:
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—ä–µ–∫—Ç datetime.date
        birthday = datetime.datetime.strptime(bday, '%d.%m.%Y').date()
    except:
        # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        update.message.reply_text(DICT_MSG['invalid_bday'], parse_mode='HTML')
        return 'get_bday'
    else:
        # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –¥–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –≤ –±—É–¥—É—â–µ–º
        if birthday > datetime.datetime.now().date():
            # –ï—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ
            update.message.reply_text(DICT_MSG['bday_in_future'],
                                      parse_mode='HTML')
            return 'get_bday'
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –ë–î
            with sqlite3.connect('users.db') as connect:
                cursor = connect.cursor()
                cursor.execute("UPDATE users SET birthday = ? WHERE id = ?",
                               (birthday, user_id))
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                cursor.execute("SELECT * FROM users WHERE id=?", (user_id,))
                row = cursor.fetchone()
                fullname, city, birthday = row[1], row[3], row[4]
                end_msg = (f'–ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n'
                        f'ID: {user_id}\n–§–ò–û: {fullname}\n–ì–æ—Ä–æ–¥: {city}\n'
                        f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday}')
                logger.info(end_msg)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            update.message.reply_text(
                text=DICT_MSG['end_reg'],
                parse_mode='HTML',
                reply_markup=REPLY_MARKUP
            )
            bot.send_message(
                    chat_id=786540182,
                    text=end_msg,
                    parse_mode='HTML'
                )
            return telegram.ext.ConversationHandler.END


# –û–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—é
conv_handler = telegram.ext.ConversationHandler(
    entry_points=[telegram.ext.CommandHandler('start', start)],
    states={
        'get_name': [
            telegram.ext.MessageHandler(telegram.ext.Filters.text, get_name)
        ],
        'get_city': [
            telegram.ext.MessageHandler(telegram.ext.Filters.text, get_city)
        ],
        'get_bday': [
            telegram.ext.MessageHandler(telegram.ext.Filters.text, get_bday)
        ],
    },
    fallbacks=[]
)


def button_handler(update, context):
    '''–§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É'''
    user_id = update.effective_chat.id
    with sqlite3.connect('users.db') as connect:
        cursor = connect.cursor()
        cursor.execute("SELECT * FROM users WHERE id=?", (user_id,))
        row = cursor.fetchone()
        fullname, city, birthday = row[1], row[3], row[4]
        msg = Message(fullname, city, birthday)
    text = msg.create_personal_data_message()
    update.message.reply_text(text, parse_mode='HTML')


def any_msg(update, context):
    '''
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥—ç–π–ª–∏
    —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ 6:00 –ø–æ –ú–æ—Å–∫–≤–µ)
    '''
    update.message.reply_text(get_time_to_msg(), parse_mode='HTML')

def send_message_every_day():
    '''–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ 6:00 –ø–æ –ú–æ—Å–∫–≤–µ'''
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
    users = get_users_dict()
    # –° –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞ —Å–æ–∑–¥–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    for user in users:
        if not users[user]['is_blocked']:
            msg = Message(
                users[user]['name'],
                users[user]['city'],
                users[user]['birthday']
            )
            # –ò –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –¥—ç–π–ª–∏-—Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                bot.send_message(
                    chat_id=user,
                    text=msg.create_daily_message(),
                    parse_mode='HTML'
                )
            except Unauthorized:
                error_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {user}"
                logger.error(error_message)
                with sqlite3.connect('users.db') as connect:
                    cursor = connect.cursor()
                    cursor.execute("UPDATE users SET is_blocked = ? \
                                   WHERE id = ?", (1, user))
            else:
                logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: '
                            f'{users[user]["name"]}')


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
upd.dispatcher.add_handler(conv_handler)
upd.dispatcher.add_handler(telegram.ext.MessageHandler(
    telegram.ext.Filters.regex('^üë§ –ü–æ–∫–∞–∂–∏ –º–æ–π –ø—Ä–æ—Ñ–∞–π–ª$'), button_handler))
upd.dispatcher.add_handler(telegram.ext.MessageHandler(
    telegram.ext.Filters.text & ~telegram.ext.Filters.command, any_msg))
upd.start_polling()

# –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é send_message_every_day() –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
schedule.every().day.at("14:12").do(send_message_every_day)
while True:
    schedule.run_pending()
    time.sleep(1)
