import os

import requests
import xmltodict
from dotenv import load_dotenv
from geopy.geocoders import Nominatim

import astronum

load_dotenv()


def get_quote():
    url = 'http://api.forismatic.com/api/1.0/'
    params = {
        'method': 'getQuote',
        'format': 'json',
    }
    response = requests.get(url=url, params=params)
    if response.status_code == 200:
        data = response.json()
        quote = data["quoteText"]
        author = data["quoteAuthor"]
        return {
            'quote': quote.strip(),
            'author': author
        }
    else:
        return None
    
def get_weather(city):
    CONDITION_DICT = {
        'clear': '‚òÄÔ∏è —è—Å–Ω–æ',
        'partly-cloudy': '‚õÖ –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ',
        'cloudy': '‚õÖ –æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
        'overcast': '‚òÅÔ∏è –ø–∞—Å–º—É—Ä–Ω–æ',
        'drizzle': 'üåßÔ∏è –º–æ—Ä–æ—Å—å',
        'light-rain': 'üåßÔ∏è –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
        'rain': 'üåßÔ∏è –¥–æ–∂–¥—å',
        'moderate-rain': 'üåßÔ∏è —É–º–µ—Ä–µ–Ω–Ω–æ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
        'heavy-rain': 'üåßÔ∏è —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
        'continuous-heavy-rain': 'üåßÔ∏è –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
        'showers': 'üåßÔ∏è –ª–∏–≤–µ–Ω—å',
        'wet-snow': 'üåßÔ∏èüå®Ô∏è –¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º',
        'light-snow': 'üå®Ô∏è –Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥',
        'snow': 'üå®Ô∏è —Å–Ω–µ–≥',
        'snow-showers': 'üå®Ô∏è —Å–Ω–µ–≥–æ–ø–∞–¥',
        'hail': 'üåßÔ∏è –≥—Ä–∞–¥',
        'thunderstorm': '‚õàÔ∏è –≥—Ä–æ–∑–∞',
        'thunderstorm-with-rain': '‚õàÔ∏è –¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π',
        'thunderstorm-with-hail': '‚õàÔ∏è –≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º'
    }
    geolocator = Nominatim(user_agent="my_app")
    location = geolocator.geocode(city)
    url = "https://api.weather.yandex.ru/v2/informers"
    params = {
        'lat': str(location.latitude),
        'lon': str(location.longitude)
    }
    headers = {"X-Yandex-API-Key": os.getenv('X_YANDEX_API_KEY')}
    response = requests.get(url=url, headers=headers, params=params)
    if response.status_code == 200:
        data = response.json()
        temp_avg = data['forecast']['parts'][0]['temp_avg']
        feels_like = data['forecast']['parts'][0]['feels_like']
        condition = CONDITION_DICT[
            data['forecast']['parts'][0]['condition']
        ]
        if 'temp_water' in data['forecast']['parts'][0]:
            temp_water = data['forecast']['parts'][0]['temp_water']
        else:
            temp_water = None
        sunrise = data['forecast']['sunrise']
        sunset = data['forecast']['sunset']
        wind_speed = data['forecast']['parts'][0]['wind_speed']
        wind_gust = data['forecast']['parts'][0]['wind_gust']
        return {
            'temp_avg': temp_avg, # –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            'feels_like': feels_like, # –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫
            'condition': condition, # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
            'temp_water': temp_water, # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã
            'sunrise': sunrise, # –í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞
            'sunset': sunset, # –í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞
            'wind_speed': wind_speed, # –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞
            'wind_gust': wind_gust # –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Ä—ã–≤–æ–≤ –≤–µ—Ç—Ä–∞
        }
    else:
        return None

def get_random_film():
    url = 'https://api.kinopoisk.dev/v1.3/movie/random'
    headers = {
        'accept': 'application/json',
        'X-API-KEY': os.getenv('SECRET_KEY_API_KINOPOISK')
    }
    response = requests.get(url=url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        title = data['name']
        description = data['description']
        genres = [i['name'] for i in data['genres']]
        year = data['year']
        rating = data['rating']['kp']
        link = f'https://www.kinopoisk.ru/film/{data["id"]}'
        return {
            'title': title,
            'description': description,
            'genres': genres,
            'year': year,
            'rating': rating,
            'link': link
        }
    else:
        return None

def get_horoscope(zodiac):
    zodiac = zodiac.lower()
    url = 'https://ignio.com/r/export/utf/xml/daily/com.xml'
    response = requests.get(url)
    if response.status_code == 200:
        xml_string = response.content.decode('utf-8')
        data_dict = xmltodict.parse(xml_string)
        return data_dict['horo'][zodiac]['today']
    else:
        return None

def get_psychomatrix(fullname: str, birthdate: str):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ –ø—Å–∏—Ö–æ–º–∞—Ç—Ä–∏—Ü—ã'''
    name_num = astronum.get_name_number(fullname)
    date_num = astronum.get_birthdate_number(birthdate)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
    return {
        "name_num": name_num,
        "name_num_desc": astronum.NAME_NUMBERS_DICT[name_num],
        "date_num": date_num,
        "date_num_desc": astronum.BIRTH_NUMBERS_DICT[date_num]
    }