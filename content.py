import os

import logging
import requests
import xmltodict
from dotenv import load_dotenv
from geopy.geocoders import Nominatim

import astronum

load_dotenv()

logger = logging.getLogger('content_logger')
logger.setLevel(logging.DEBUG)
file_handler = logging.FileHandler('content_logs.log')
file_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

ERROR = '<–¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã>'

DICT_NUM_SMILE = {
    1: '1‚É£',
    2: '2‚É£',
    3: '3‚É£',
    4: '4‚É£',
    5: '5‚É£',
    6: '6‚É£',
    7: '7‚É£',
    8: '8‚É£',
    9: '9‚É£'
}

def get_quote():
    url = 'http://api.forismatic.com/api/1.0/'
    params = {
        'method': 'getQuote',
        'format': 'json',
    }
    response = requests.get(url=url, params=params)
    if response.status_code == 200:
        data = response.json()
        quote = data.get("quoteText")
        author = data.get("quoteAuthor")
        logger.info(f'–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ—Ç –∏–∑ {url}\n'
                    f'–ö–æ–Ω—Ç–µ–Ω—Ç: —Ü–∏—Ç–∞—Ç–∞ - {quote}, –∞–≤—Ç–æ—Ä - {author}')
        return {
            'quote': quote.strip(),
            'author': author
        }
    else:
        logger.error(f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É "{url}"\n'
                     f'–ö–æ–¥ –æ—à–∏–±–∫–∏:{response.status_code}')
        return None
    
def get_weather(city):
    CONDITION_DICT = {
        'clear': ['‚òÄÔ∏è', '–Ø—Å–Ω–æ'],
        'partly-cloudy': ['‚õÖ', '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ'],
        'cloudy': ['‚õÖ', '–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏'],
        'overcast': ['‚òÅÔ∏è', '–ü–∞—Å–º—É—Ä–Ω–æ'],
        'drizzle': ['üåßÔ∏è', '–ú–æ—Ä–æ—Å—å'],
        'light-rain': ['üåßÔ∏è', '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å'],
        'rain': ['üåßÔ∏è', '–î–æ–∂–¥—å'],
        'moderate-rain': ['üåßÔ∏è', '–£–º–µ—Ä–µ–Ω–Ω–æ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å'],
        'heavy-rain': ['üåßÔ∏è', '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å'],
        'continuous-heavy-rain': ['üåßÔ∏è', '–î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å'],
        'showers': ['üåßÔ∏è', '–õ–∏–≤–µ–Ω—å'],
        'wet-snow': ['üåßÔ∏èüå®Ô∏è', '–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º'],
        'light-snow': ['üå®Ô∏è', '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥'],
        'snow': ['üå®Ô∏è', '–°–Ω–µ–≥'],
        'snow-showers': ['üå®Ô∏è', '–°–Ω–µ–≥–æ–ø–∞–¥'],
        'hail': ['üåßÔ∏è', '–ì—Ä–∞–¥'],
        'thunderstorm': ['‚õàÔ∏è', '–ì—Ä–æ–∑–∞'],
        'thunderstorm-with-rain': ['‚õàÔ∏è', '–î–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π'],
        'thunderstorm-with-hail': ['‚õàÔ∏è', '–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º']
    }
    geolocator = Nominatim(user_agent="my_app")
    location = geolocator.geocode(city)
    url = "https://api.weather.yandex.ru/v2/informers"
    params = {
        'lat': str(location.latitude),
        'lon': str(location.longitude),
        'lang': "ru_RU"
    }
    headers = {"X-Yandex-API-Key": os.getenv('X_YANDEX_API_KEY')}
    response = requests.get(url=url, headers=headers, params=params)
    if response.status_code == 200:
        data = response.json()
        parts = data.get('forecast', {}).get('parts', [])
        if parts:
            temp_avg = parts[0].get('temp_avg', ERROR)
            feels_like = parts[0].get('feels_like', ERROR)
            condition = CONDITION_DICT.get(
                parts[0].get('condition', ERROR)
            )
            temp_water = parts[0].get('temp_water', ERROR)
            sunrise = data.get('forecast', {}).get('sunrise', ERROR)
            sunset = data.get('forecast', {}).get('sunset', ERROR)
            wind_speed = parts[0].get('wind_speed', ERROR)
            wind_gust = parts[0].get('wind_gust', ERROR)
            dict_response = {
                'temp_avg': temp_avg, # –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                'feels_like': feels_like, # –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫
                'condition': condition, # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
                'temp_water': temp_water, # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã
                'sunrise': sunrise, # –í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞
                'sunset': sunset, # –í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞
                'wind_speed': wind_speed, # –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞
                'wind_gust': wind_gust # –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Ä—ã–≤–æ–≤ –≤–µ—Ç—Ä–∞
            }
            logger.info(f'–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ—Ç –∏–∑ {url}\n'
                        f'–ö–æ–Ω—Ç–µ–Ω—Ç: –ø–æ–≥–æ–¥–∞ - {dict_response} –≤ –≥–æ—Ä–æ–¥–µ - {city}')
            return dict_response
        else:
            logger.error(f'–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ª–æ–≤–∞—Ä—è. –°–ª–æ–≤–∞—Ä—å - {data}')
            return None
    else:
        logger.error(f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É "{url}"\n'
                     f'–ö–æ–¥ –æ—à–∏–±–∫–∏:{response.status_code}')
        return None

def get_random_film():
    url = 'https://api.kinopoisk.dev/v1.3/movie/random'
    headers = {
        'accept': 'application/json',
        'X-API-KEY': os.getenv('SECRET_KEY_API_KINOPOISK')
    }
    response = requests.get(url=url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        title = data.get('name')
        description = data.get('description')
        genres = [i.get('name') for i in data.get('genres')]
        year = data.get('year')
        rating = data.get('rating').get('kp')
        link = f'https://www.kinopoisk.ru/film/{data.get("id")}'
        dict_response = {
            'title': title,
            'description': description,
            'genres': genres,
            'year': year,
            'rating': rating,
            'link': link
        }
        logger.info(f'–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ—Ç –∏–∑ {url}\n'
                    f'–ö–æ–Ω—Ç–µ–Ω—Ç: –§–∏–ª—å–º - {dict_response}')
        return dict_response
    else:
        logger.error(f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É "{url}"\n'
                     f'–ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}')
        return None

def get_horoscope(zodiac):
    zodiac = zodiac.lower()
    url = 'https://ignio.com/r/export/utf/xml/daily/com.xml'
    response = requests.get(url)
    if response.status_code == 200:
        xml_string = response.content.decode('utf-8')
        data_dict = xmltodict.parse(xml_string)
        horoscope = data_dict.get('horo').get(zodiac).get('today')
        logger.info(f'–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ—Ç –∏–∑ {url}\n'
                    f'–ö–æ–Ω—Ç–µ–Ω—Ç: –ì–æ—Ä–æ—Å–∫–æ–ø - {horoscope}')
        return horoscope
    else:
        logger.error(f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É "{url}"\n'
                     f'–ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}')
        return None

def get_psychomatrix(fullname: str, birthdate: str):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ –ø—Å–∏—Ö–æ–º–∞—Ç—Ä–∏—Ü—ã'''
    name_num = astronum.get_name_number(fullname)
    date_num = astronum.get_birthdate_number(birthdate)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
    return {
        "name_num": DICT_NUM_SMILE[name_num],
        "name_num_desc": astronum.NAME_NUMBERS_DICT[name_num],
        "date_num": DICT_NUM_SMILE[date_num],
        "date_num_desc": astronum.BIRTH_NUMBERS_DICT[date_num]
    }
